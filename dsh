#!/bin/bash

# `set +e` is used to continue on errors throughout this script.
set -euo pipefail
IFS=$'\n\t'

# Set the docker machine to be used by the project. Ignored on Linux.
MACHINE='default'

# Set the top level domain used to by nginx-proxy to direct traffic to
# conatiners. The TLDs 'local' and 'localhost' are reserved in macOS, and 'dev'
# exists in global DNS, which may cause issues reassigning it with dnsmasq.
export DOMAIN=${DOMAIN:-'test'}

# Nginx proxy exposed port. Useful when using something other than 80.
export NGINX_PORT=$(docker port nginx-proxy | awk -F ':' '{print $2}')

# Used as the prefix for docker networking, container naming and nginx hostname.
export PROJECT=$(basename ${PWD})

# Determine the OS type of the host machine.
if [ "$(uname)" == "Darwin" ]; then
  HOST_TYPE='mac'
  # On macOS ths SSH Sock directory is actually a named docker volume.
  export HOST_SSH_AUTH_SOCK_DIR="ssh"
  export CONTAINER_SSH_AUTH_SOCK="/ssh/auth/sock"
else
  HOST_TYPE='linux'
  export HOST_SSH_AUTH_SOCK_DIR=$(dirname ${SSH_AUTH_SOCK})
  export CONTAINER_SSH_AUTH_SOCK=/ssh/$(basename ${SSH_AUTH_SOCK})
fi

# Setup some functions to output warnings.
notice() {
  printf "\e[32;01m$1\e[39;49;00m\n"
}

warning() {
  printf "\e[33;01m$1\e[39;49;00m\n"
}

error() {
  printf "\e[31;01m$1\e[39;49;00m\n"
}

# Ensure script is NOT running inside a container - must be run from host.
if [ -f /.dockerenv ]; then
  error "Inception error - you can't run $0 within a docker container."
  exit
fi

# Command: ./dsh start
# Configures environment then brings up project using docker-compose.yml file.
dsh_start() {
  setup
  notice "Starting project containers."
  docker-compose up -d
  setup_xdebug
  export URL="http://${PROJECT}.${DOMAIN}$(if [ ! $NGINX_PORT -eq '80' ]; then echo ":$NGINX_PORT"; fi)"
  notice "Please wait about 10 seconds for the database to settle.
You can now access the site from ${URL}.
Project files are available in /code, You may need to build and install your
  project before it starts working.
Connecting via ./dsh shell and running robo build is a common next step."
}

# Command: ./dsh shell
# Connects a shell to the web image as the current user.
dsh_shell() {
  if ! docker ps | grep "\s${PROJECT}_web_1" > /dev/null; then
    notice "Project not running, starting."
    dsh_start
  fi

  # Execute project specific setup
  dsh_project

  # @note This logic could be moved to a script that's added to the dev image.
  # Add host machine user to web container if it doesn't already exist.
  if ! docker exec ${PROJECT}_web_1 id -u ${USER} > /dev/null 2>&1; then
    notice "Setting up user $USER on web container."
    # Add user with local $USER name to container.
    docker exec ${PROJECT}_web_1 adduser --disabled-password --uid ${UID} \
      --gecos ${USER} --home /home/${USER} ${USER} > /dev/null
    # Add local .gitconfig to user's home dir on container.
    docker cp ${HOME}/.gitconfig ${PROJECT}_web_1:/home/${USER}/
    # Allow sudo without password for user.
    docker exec ${PROJECT}_web_1 /bin/bash -c "echo '${USER} ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/${USER}"
  fi

  docker exec --interactive --tty --user ${USER} \
    --env SSH_AUTH_SOCK=${CONTAINER_SSH_AUTH_SOCK} \
    --env LINES=$(tput lines) --env COLUMNS=$(tput cols) \
    ${DSH_PROJECT[@]:-} \
    --env TERM=xterm-256color \
    ${PROJECT}_web_1 ${@:-/bin/bash}
}

# Command: ./dsh stop
# Stops project and brings down network after disconnecting nginx proxy.
dsh_stop() {
  # If mac, ensure that docker-machine vars are available
  # Need this check if working with multiple terminal sessions.
  if [ ${HOST_TYPE} == 'mac' ]; then
    setup_docker_machine
  fi

  notice "Stopping containers."
  docker-compose stop
}

# Command: ./dsh stop
# Stops project, then takes down containers and removes volumes if possible.
dsh_purge() {
  dsh_stop
  if docker network ls | grep "\s${PROJECT}_default" > /dev/null; then
    notice "Disconnecting nginx proxy from network."
    set +e
    docker network disconnect ${PROJECT}_default nginx-proxy
    notice "Removing network."
    docker network rm ${PROJECT}_default
    set -e
  fi
  notice "Taking down containers, removing volumes if possible."
  set +e
  docker-compose down -v
  set -e
}

# Command: ./dsh status
# Shows status information about project containers.
dsh_status() {
  if ! docker ps | grep "\s${PROJECT}_"; then
    notice "${PROJECT} not running."
  fi
}

# Command: ./dsh logs
# Tails logs from web container.
dsh_logs() {
  # If mac, ensure that docker-machine vars are available
  # Need this check if working with multiple terminal sessions.
  if [ ${HOST_TYPE} == 'mac' ]; then
    setup_docker_machine
  fi

  if docker ps | grep "\s${PROJECT}_web_1" > /dev/null; then
    docker logs --follow --tail 1 ${PROJECT}_web_1
  fi
}

dsh_project() {
  set +e
  if [ -f dsh.project ]; then
    source dsh.project
  fi
  set -e
}

setup() {
  if [ ${HOST_TYPE} == 'mac' ]; then
    # If Docker for Mac isn't running, assume Docker Machine.
    if [[ ! $(docker version --format "{{.Server.KernelVersion}}") == *-moby ]]; then
      setup_docker_machine
    fi
    setup_ssh_agent_proxy
  fi
  setup_nginx_proxy
  setup_docker_network
  setup_nginx_connect
}

setup_docker_machine() {
  set +e
  STATUS=$(docker-machine status ${MACHINE})

  # Check if the docker machine exists already, create one if not.
  if [[ $? == 1 ]]; then
    notice "No ${MACHINE} environment found."
    create_machine
  fi
  set -e

  if [[ ${STATUS} == 'Stopped' ]]; then
    notice "Docker machine not running, starting now."
    docker-machine start ${MACHINE}
  fi

  if [[ ${STATUS} == 'Saved' ]]; then
    notice "Docker machine in saved state, restarting now."
    docker-machine start ${MACHINE}
  fi

  if [[ ${STATUS} == 'Error' ]]; then
    notice "Docker machine vm does not exist but docker-machine still has it registered, remove then create."
    docker-machine rm ${MACHINE}
    create_machine
  fi

  notice "Loading vars for docker machine."
  eval "$(docker-machine env ${MACHINE})"
}

setup_ssh_agent_proxy() {
  if docker ps -a | grep "ssh-agent" > /dev/null; then
    docker start ssh-agent > /dev/null
  else
    notice "Creating ssh agent proxy."
    docker run -u ${UID} -d -v ${PROJECT}_${HOST_SSH_AUTH_SOCK_DIR}:/ssh --name=ssh-agent whilp/ssh-agent

    # Add all ssh keys from host machine to the agent proxy.
    CURRENT_SSH_KEYS=$(ssh-add -l | awk '{print $3}')
    notice "Adding ssh keys to agent proxy."
    docker run -u ${UID} --rm -v ${PROJECT}_${HOST_SSH_AUTH_SOCK_DIR}:/ssh \
      -v ${HOME}:${HOME} -it whilp/ssh-agent ssh-add ${CURRENT_SSH_KEYS}
  fi

  if ! docker ps | grep "ssh-agent" > /dev/null; then
    error "whilp/ssh-agent could not be started."
  fi
}

setup_docker_network() {
  if ! docker network ls | grep "\s${PROJECT}_default" > /dev/null; then
    notice "Creating docker network for project."
    docker network create ${PROJECT}_default
  fi
}

setup_nginx_proxy() {
  # Nginx proxy is not needed for CI.
  if [ -n "${GITLAB_CI+1}" ]; then
    return;
  fi

  if docker ps -a | grep "nginx-proxy" > /dev/null; then
    docker start nginx-proxy > /dev/null
  else
    # Configuration is only applied when the container is created.
    docker run -d -p 80:80 \
      -v /var/run/docker.sock:/tmp/docker.sock:ro \
      -v /etc/nginx/conf.d/dsh_proxy.conf:$(pwd)/dsh_proxy.conf \
      --restart always --name nginx-proxy \
      jwilder/nginx-proxy
  fi

  if ! docker ps | grep "nginx-proxy" > /dev/null; then
    error "jwilder/nginx-proxy could not be started."
  else
    # Update the nginx port as it wasn't running initially.
    export NGINX_PORT=$(docker port nginx-proxy | awk -F ':' '{print $2}')
  fi
}

setup_nginx_connect() {
  set +e
  # Test to make sure its not already on the network.
  if ! docker network inspect ${PROJECT}_default | grep "nginx-proxy" > /dev/null; then
    notice "Connecting nginx-proxy to the network."
    docker network connect ${PROJECT}_default nginx-proxy
  fi
  set -e
}

dsh_setup_dnsmasq() {
  set +e
  if [ ${HOST_TYPE} == 'mac' ]; then
    notice "Attempting to configure dnsmasq."
    WEB_HOST_IP="127.0.0.1"
    if [[ $(docker version --format "{{.Server.KernelVersion}}") != *-moby ]]; then
      eval "$(docker-machine env ${MACHINE})"
      WEB_HOST_IP=$(docker-machine ip ${MACHINE})
    fi

    # Test to see if dnsmasq.conf exists.
    if [ ! -f /usr/local/etc/dnsmasq.conf ]; then
      notice "Creating missing dnsmasq.conf file."
      # Copy example file across.
      mkdir -p /usr/local/etc
      touch /usr/local/etc/dnsmasq.conf
    fi
    notice "Writing dnsmasq config: *.${DOMAIN} traffic to ${WEB_HOST_IP}."
    echo "address=/${DOMAIN}/${WEB_HOST_IP}" > /usr/local/etc/dnsmasq.conf

    # Write resolver if none exists.
    if [ ! -f /etc/resolver/${DOMAIN} ]; then
      notice "Creating missing resolver config for ${DOMAIN}."
      mkdir -p /etc/resolver
      sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/'${DOMAIN}''
    fi

    # Restart dnsmasq.
    notice "Restarting dnsmasq with homebrew services."
    sudo brew services stop dnsmasq
    sudo brew services start dnsmasq
  else
    ping -c 1 ${PROJECT}.${DOMAIN} 2>&1 > /dev/null
    if [[ $? != 0 ]]; then
      notice "Attempting to configure dnsmasq"
      if [ ! -f /etc/dnsmasq.d/${DOMAIN} ]; then
        echo "address=/${DOMAIN}/127.0.0.1" | sudo tee -a /etc/dnsmasq.d/${DOMAIN} > /dev/null
        notice "Restarting dnsmasq"
        sudo service dnsmasq restart
      else
        error "Dnsmasq not configured, please configure manually. Read readme documentation for further information."
      fi
    fi
  fi
  set -e
}

setup_xdebug() {
  HOST_IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | head -1)
  notice "Configuring xdebug to connect to host at: ${HOST_IP}."
  # Get the PHP VERSION, so we edit the correct ini file.
  PHP_VERSION=$(docker exec -t "${PROJECT}_web_1" php -v | head -n1 | awk '{print $2}' | awk -F '-' '{print $1}' | awk -F '.' '{print $1"."$2}')
  docker exec -t "${PROJECT}_web_1" sed -i "s/^xdebug\.remote_host=.*$/xdebug.remote_host=${HOST_IP}/" "/etc/php/${PHP_VERSION}/mods-available/xdebug.ini"
  set +e
  docker exec -t -u root "${PROJECT}_web_1" apachectl graceful 2> /dev/null
  set -e
}

create_machine() {
  notice "Creating new machine."
  docker-machine create --driver virtualbox --engine-insecure-registry registry.${DOMAIN}:5000 ${MACHINE}
  # If docker-machine-nfs is not present, error out
  if ! type "docker-machine-nfs" > /dev/null; then
    error "Please install 'docker-machine-nfs' using\n  $ brew install docker-machine-nfs"
    exit 1
  fi

  # Use nfs, configure all directories to root.
  docker-machine-nfs ${MACHINE} -f --nfs-config="-alldirs -maproot=0"
  docker-machine ssh ${MACHINE} ln -s $(pwd)/code code
  docker-machine ssh ${MACHINE} sudo mv code /code

  # Reconfigure dnsmasq due to possible docker machine IP change.
  dsh_setup_dnsmasq
}

# Command: ./dsh install
# Installs project dependencies for Mac.
dsh_install_tools() {
 # For macOS, linux ppl please add your tests here.
 if [ ${HOST_TYPE} != 'mac' ]; then
   error "Only for mac users, you yourself before wrecking thou self \n \n ... fool!"
   exit
 fi

  if ! which brew > /dev/null; then
    error "Missing homebrew, please install. \n http://brew.sh/"
    exit;
  else
    notice "You have homebrew installed!"
  fi

  if ! which docker-machine > /dev/null; then
    error "Missing the docker toolbox, please install. \n https://www.docker.com/products/docker-toolbox"
    exit;
  else
    notice "You have the docker toolbox installed!"
  fi

  if ! which docker-machine-nfs > /dev/null; then
    warning "Missing docker-machine-nfs \n Now attempting to install docker-machine-nfs with homebrew \n"
    brew install docker-machine-nfs
  else
    notice "You have docker-machine-nfs installed!"
  fi

  if ! brew ls --versions dnsmasq > /dev/null; then
    warning "Missing dnsmasq \n Now attempting to install dnsmasq with homebrew \n"
    brew install dnsmasq
    exit;
  else
    notice "You have dnsmasq installed"
  fi
}

# Command: ./dsh pull
# Fetches all images used by the project.
dsh_pull() {
  docker-compose pull
  docker pull jwilder/nginx-proxy
  docker pull uofa/utility-php7
}

dsh_help() {
  printf "\nUsage: dsh COMMAND\n\n
Commands:\n
\thelp\tShow this help.\n
\tinstall\tInstall dependencies and tools for development.\n
\tpurge\tPurge the docker containers, network and proxy and remove all data.\n
\tsetup_dns\tConfigures dnsmasq.\n
\tshell\tStart a shell which is connected to the containers and can be used to run commands.\n
\tstart\tStart the docker containers, network and proxy.\n
\tstatus\tShow the status of this projects containers.\n
\tstop\tStop the docker containers, network and proxy, but keep data for a re-start.\n
\nIf no command is given, shell is the default.\n
Commands can be shortened to their uniqe component, eg ./dsh sh is the same as ./dsh shell.\n\n"
}

# Set a default command to show usage when no arguments provided.
COMMAND=${1:-default}

case ${COMMAND} in
  e*)
    dsh_shell ${@:2}
    ;;
  h*|-h|--help)
    dsh_help
    ;;
  i*)
    dsh_install_tools
    ;;
  l*)
    dsh_logs
    ;;
  pul*)
    dsh_pull
    ;;
  pur*)
    dsh_purge
    ;;
  r*)
    dsh_shell ${@:2}
    ;;
  se*)
    dsh_setup_dnsmasq
    ;;
  sh*|ss*)
    dsh_shell ${@:2}
    ;;
  star*)
    dsh_start
    ;;
  stat*)
    dsh_status
    ;;
  sto*)
    dsh_stop
    ;;
  *)
    warning "Unknown command specified, defaulting to shell. For other options try:\n$0 [help|logs|purge|shell|start|status|stop].\n"
    dsh_shell
    ;;
esac
